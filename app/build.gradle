apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
//apply plugin: 'org.greenrobot.greendao'
apply plugin: 'com.didi.dokit'
apply plugin: 'walle'
apply plugin: 'AndResGuard'

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {

    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        // applicationId 会替换 AndroidManifest.xml 中的 manifest 标签下 package 的 value
        applicationId "com.zkp.breath"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        // 添加多dex分包支持，因为安卓中方法索引值为两个字节，四位十六进制的一个数值，即[0, 0xffff]，
        // 所以最大方法数为65536个。一旦超出了，就需要进行分包，所以我们就需要开启这个参数。
        multiDexEnabled true
        // 表明要使用AndroidJUnitRunner进行单元测试
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // 风味维度，是需要结合 “产品风味（即productFlavors）” 来一起使用的。
        flavorDimensions "versionCode"

        ndk {
            // 设置支持的SO库架构('x86'是针对虚拟器使用的)
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86'
        }

        // 配置编译时 java 的一些参数
        javaCompileOptions {
            annotationProcessorOptions {
                // ARouter
                arguments = [AROUTER_MODULE_NAME: project.getName()]
                // room
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

    }

    // 代码扫描分析配置
    lintOptions {
        // 打包release版本的时候是否进行检测
        checkReleaseBuilds false
    }

    // 签名配置(可以定义多套签名规则)
    signingConfigs {

        productBreath {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias = keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }

        productA {
            storeFile file(keystoreProperties['productA_storeFile'])
            storePassword keystoreProperties['productA_storePassword']
            keyAlias = keystoreProperties['productA_keyAlias']
            keyPassword keystoreProperties['productA_keyPassword']
        }

        productB {
            storeFile file(keystoreProperties['productB_storeFile'])
            storePassword keystoreProperties['productB_storePassword']
            keyAlias = keystoreProperties['productB_keyAlias']
            keyPassword keystoreProperties['productB_keyPassword']
        }

    }

    // 设置打包配置，结合productFlavors配置会在as的Build Variants的Active Build Variant (定义公共的配置，具体的签名配置在productFlavors下指定)
    buildTypes {

        release {
            // 是否支持断点调试 (需要关闭minifyEnabled和shrinkResources)
            debuggable false
            // 是否启用代码压缩、优化和混淆（由R8或者ProGuard执行）
            minifyEnabled true
            // 启用资源压缩，需配合 minifyEnabled=true 使用（由Android Gradle plugin执行）
            shrinkResources true
            // 是否对APK包执行ZIP对齐优化，减小zip体积，增加运行效率
            zipAlignEnabled true
            // 指定混淆的规则文件，getDefaultProguardFile是Android 系统为我们提供的默认混淆规则文件,而 proguard-rules.pro 则是我们想要自定义的混淆规则
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // 设置签名配置，如果productFlavors使用的签名都是一致的话，那么可以在此处开启signingConfig即可，但一般不推荐，防止一些第三方sdk是和签名绑定的。
            // 注意：此处的优先级高于productFlavors下的设置，所以如果两处都有设置，那么此处一定会覆盖productFlavors的设置。
//            signingConfig signingConfigs.release
        }

        debug {
            // 自定义的配置在对应模块的BuildConfig（type，name，value）
            buildConfigField("boolean", "LOG_DEBUG", "false")
            buildConfigField("String", "URL_PERFIX", "\"https://www.baidu.com/\"")

            // 添加 value 资源。添加到res/value，通过R.string.hidden_entrance获取
            resValue "string", "hidden_entrance", "隐藏入口"

            minifyEnabled false
            // 设置签名配置，如果productFlavors使用的签名都是一致的话，那么可以在此处开启signingConfig即可，但一般不推荐，防止一些第三方sdk是和签名绑定的。
            // 注意：此处的优先级高于productFlavors下的设置，所以如果两处都有设置，那么此处一定会覆盖productFlavors的设置。
//            signingConfig signingConfigs.release
        }

    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            def time = new Date().format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone("UTC"))
            if (variant.buildType.name == 'release') {
                outputFileName = "Breath_" + "${variant.mergedFlavor.versionName}_release.apk"
            } else if (variant.buildType.name == 'debug') {
                outputFileName = "Breath_" + "${variant.mergedFlavor.versionName}_debug.apk"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = '1.8'
            freeCompilerArgs = ['-XXLanguage:+InlineClasses']
        }
    }

    sourceSets {
        // main文件夹
        main {
            // java代码目录
            java.srcDirs = ['src/main/java', 'src/main/aidl']
            // 清单文件路径
//            manifest.srcFile 'src/main/AndroidManifest.xml'
        }
        // productA文件夹
        productA {
            java.srcDirs = ['src/productA/java', 'src/productA.jks/aidl']
//            manifest.srcFile 'src/productA/AndroidManifest.xml'
        }
        // productB文件夹
        productB {
            java.srcDirs = ['src/productB/java', 'src/productB/aidl']
//            manifest.srcFile 'src/productB/AndroidManifest.xml'
        }
    }

//    greendao {
//        //数据库版本号
//        schemaVersion 1
//        // 设置DaoMaster、DaoSession、Dao 包名
//        daoPackage 'com.zkp.breath.database.greendao'
//        //设置DaoMaster、DaoSession、Dao目录,请注意，这里路径用/不要用.
//        targetGenDir 'src/main/java'
//        //设置为true以自动生成单元测试。
//        generateTests false
//        //应存储生成的单元测试的基本目录。默认为 src / androidTest / java。
//        //targetGenDirTests 'src/androidTest/java'
//    }

    andResGuard {
        // mappingFile = file("./resource_mapping.txt")
        mappingFile = null
        use7zip = true
        useSign = true
        // 打开这个开关，会keep住所有资源的原始路径，只混淆资源的名字
        keepRoot = false
        // 设置这个值，会把arsc name列混淆成相同的名字，减少string常量池的大小
        fixedResName = "arg"
        // 打开这个开关会合并所有哈希值相同的资源，但请不要过度依赖这个功能去除去冗余资源
        mergeDuplicatedRes = true
        whiteList = [
                // for your icon
                "R.drawable.icon",
                // for fabric
                "R.string.com.crashlytics.*",
                // for google-services
                "R.string.google_app_id",
                "R.string.gcm_defaultSenderId",
                "R.string.default_web_client_id",
                "R.string.ga_trackingId",
                "R.string.firebase_database_url",
                "R.string.google_api_key",
                "R.string.google_crash_reporting_api_key"
        ]
        compressFilePattern = [
                "*.png",
                "*.jpg",
                "*.jpeg",
                "*.gif",
        ]
        sevenzip {
            artifact = 'com.tencent.mm:SevenZip:1.2.21'
            //path = "/usr/local/bin/7za"
        }

        /**
         * 可选： 如果不设置则会默认覆盖assemble输出的apk
         **/
        // finalApkBackupPath = "${project.rootDir}/final.apk"

        /**
         * 可选: 指定v1签名时生成jar文件的摘要算法
         * 默认值为“SHA-1”
         **/
        // digestalg = "SHA-256"
    }

    /**
     *  差异化（可实现马甲包）
     * 1.defaultConfig属于基本配置，下面的配置默认继承defaultConfig
     * 2.在下面需要配置原来主包的信息，否则只有差异化的包，打包是找不到主包的
     * 3.
     */
    productFlavors {

        productBreath {
            // applicationId 应用的包名，会覆盖 defaultConfig 中的 applicationId
            // applicationId 会替换 AndroidManifest.xml 中的 manifest 标签下 package 的 value
            applicationId "com.zkp.breath"
            versionCode 1
            versionName "1.0"

            signingConfig signingConfigs.productBreath

            // 配置可以在 AndroidManifest.xml 中替换的参数，一般用于多渠道中使用，不会在 defaultConfig 中使用。
            manifestPlaceholders = [
                    APP_NAME  : "Breath",
                    ICON      : "@mipmap/ic_launcher",
                    ROUND_ICON: "@mipmap/ic_launcher_round"
            ]
        }

        productA {
            // 这里定义产品A的特性
            applicationId "com.zkp.product.a"
            versionCode 11
            versionName "1.0.1"

            signingConfig signingConfigs.productA
        }

        productB {
            // 这里定义产品B的特性
            applicationId "com.zkp.product.b"
            versionCode 21
            versionName "2.0.1"

            signingConfig signingConfigs.productB
        }
    }

    // v和vm的双向自动响应的绑定
    dataBinding {
        enabled true
    }

    viewBinding {
        enabled = true
    }
}

dependencies {

    //本地jar包依赖，表示将libs目录下所有.jar后缀的文件都添加到项目的构建路径当中
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'

    testImplementation 'junit:junit:4.13'
    // 模拟框架（一般用于jvm的单元测试隔离android库的依赖）
    testImplementation 'org.mockito:mockito-core:2.19.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // 依赖协程核心库
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines"
    // 依赖当前平台所对应的平台库
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines"

    // Lifecycle only (without ViewModel or LiveData)
//    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    // Lifecycle的观察者java8写法(DefaultLifecycleObserver)
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // ViewModel
//    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    // LiveData
//    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    // ProcessLife
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"

    // Room
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // paging
//    implementation "androidx.paging:paging-runtime:$paging_version"
    implementation "androidx.paging:paging-runtime-ktx:$paging_version"

    // Work
//    implementation "androidx.work:work-runtime:$work_version"
    implementation "androidx.work:work-runtime-ktx:$work_version"

    // startup
    implementation "androidx.startup:startup-runtime:1.0.0"

    // hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    // datastore  （和协程依赖有冲突，可能是alpha版本的问题）
    implementation "androidx.datastore:datastore-preferences:1.0.0-alpha01"

    // 分包库
    implementation 'androidx.multidex:multidex:2.0.1'

    implementation project(':zkplib')
    implementation project(':httpprotocol')
    implementation project(':networkmonitor')
    implementation project(':spiderman')

    implementation files('libs/oaid_sdk_1.0.25.aar')

    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    implementation 'com.google.android.material:material:1.2.1'

    implementation 'com.blankj:utilcodex:1.30.6'

    implementation 'io.reactivex.rxjava3:rxjava:3.0.5'
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'

    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
    kapt 'com.github.bumptech.glide:compiler:4.11.0'

    annotationProcessor "com.jakewharton:butterknife-compiler:$butterknife_version"
    kapt "com.jakewharton:butterknife-compiler:$butterknife_version"
    implementation "com.jakewharton:butterknife:$butterknife_version"

//    implementation 'org.greenrobot:greendao:3.3.0'

    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'

    // 测试集成腾讯云IM（tuikit版本，包含UI）
//    implementation 'com.tencent.imsdk:tuikit:4.5.45'

    // sp升级版框架（基于内存映射原理）
    implementation 'com.tencent:mmkv-static:1.2.5'

    // BaseRecyclerViewAdapterHelper
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.6'

    // 基于今日头条适配方案的屏幕适配库
    implementation 'me.jessyan:autosize:1.2.1'

    // disklrucache
    implementation 'com.jakewharton:disklrucache:2.0.2'

    // 阿里路由
    implementation 'com.alibaba:arouter-api:1.5.0'
    annotationProcessor 'com.alibaba:arouter-compiler:1.2.2'
    kapt 'com.alibaba:arouter-compiler:1.2.2'

    // 浏览器查看sp或者数据库神器(Logcat:DebugDB)
    debugImplementation 'com.amitshekhar.android:debug-db:1.0.6'

    // 内存泄露检验工具
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.4'

    debugImplementation "com.didichuxing.doraemonkit:dokitx:$dokitx_version"
    releaseImplementation "com.didichuxing.doraemonkit:dokitx-no-op:$dokitx_version"

    // 友盟基础组件库（所有友盟业务SDK都依赖基础组件库）
    implementation "com.umeng.umsdk:common:2.1.0"
    // 友盟统计SDK
    implementation "com.umeng.umsdk:analytics:8.1.3"
    //PushSDK必须依赖utdid库，所以需要加入对应依赖
    implementation 'com.umeng.umsdk:utdid:1.1.5.3'
    //PushSDK
    implementation 'com.umeng.umsdk:push:6.0.1'

    // material-dialogs
    implementation 'com.afollestad.material-dialogs:core:3.2.1'

    // SmartRefreshLayout
    implementation 'com.scwang.smartrefresh:SmartRefreshLayout:1.1.2'
    //没有使用特殊Header，可以不加这行
    implementation 'com.scwang.smartrefresh:SmartRefreshHeader:1.1.2'

    // 腾讯ui
    implementation 'com.qmuiteam:qmui:2.0.0-alpha10'

    // switchbutton
    implementation 'com.kyleduo.switchbutton:library:2.0.2'
    implementation 'com.github.liys666666:LSwitch:V1.0.4'

    // 第三方tabLayout
    implementation 'com.github.hackware1993:MagicIndicator:1.7.0'

    // lottie动画
    implementation 'com.airbnb.android:lottie:3.5.0'

    // svga
    implementation 'com.github.yyued:SVGAPlayer-Android:2.5.14'

    // dataBinding和viewBinding消除模版代码的库
    implementation 'com.hi-dhl:binding:1.0.7'

    def fragment_version = "1.3.2"
//    implementation "androidx.fragment:fragment:$fragment_version"
    //noinspection GradleDependency
    implementation "androidx.fragment:fragment-ktx:$fragment_version"

    def activity_version = "1.3.0-alpha06"
//    implementation "androidx.activity:activity:$activity_version"
    implementation "androidx.activity:activity-ktx:$activity_version"

    def nav_version = "2.3.5"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // 美团打包
    implementation "com.meituan.android.walle:library:$walle_version"

    // 合规检测
    compileOnly 'de.robv.android.xposed:api:82'
    compileOnly 'de.robv.android.xposed:api:82:sources'
}

walle {
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${project.buildDir}/outputs/channels")
    // 定制渠道包的APK的文件名称
    apkFileNameFormat = '${appName}-${channel}-${buildType}-v${versionName}-${versionCode}.apk'
    // 渠道配置文件
    channelFile = new File("${project.getProjectDir()}/channel.txt")
}
