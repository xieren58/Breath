> 工程build.gradle文件中buildscript和allprojects中的repositories的区别？
   https://www.cnblogs.com/caoxinyu/p/10568473.html

> AndroidStudio之Gradle配置详解
   https://www.jianshu.com/p/5fcf42c66a9f

> 模块的buildTypes的shrinkResources开关跟随minifyEnabled，否则会构建失败：Removing unused resources
   requires unused code shrinking to be turned on。

> gradle-wrapper.properties:用于在构建项目时决定使用哪个 Gradle 版本
  用来配置全局键值对数据的，可用于存放敏感数据，比如签名密钥信息

> 执行gradle命令出现 "command not found"
  Mac系统下Android Studio配置Gradle，（https://www.jianshu.com/p/b78d0eec430a）
  如果" /Applications/Android Studio.app/Contents/"没有gradle文件夹，可以创建gradle文件夹然后自行下载gradle版本解压放入此目录下。

> 获取签名jks的md5
  1. gradle -> Tasks -> android -> signingReport （https://juejin.cn/post/6987711958979969032）
     （会打印不同配置的md5，查看Variant: release 和 Config: release 的md5）
  2. windows： 打开cmd，输入: keytool -list -v -keystore 【jks的完整路径】

> 使用 allowInsecureProtocol 属性解决 gradle 的仓库地址不安全警告 (redirect to a secure protocol (like HTTPS) or allow insecure protocols)
https://www.cnblogs.com/langkyeSir/p/14877709.html

每一个build.grade文件代表着一个project，每个project有至少一个tasks

https://segmentfault.com/a/1190000004229002

>混淆：
https://mp.weixin.qq.com/s/qawywKLqie4QUoeTf8HCDA
> Android 反编译利器，jadx 的高级技巧：
https://juejin.cn/post/6844903516968845319
>AGP默认提供的混淆规则文件有:
proguard-android-optimize.txt，proguard-android.txt，proguard-defaults.txt。可通过 getDefaultProguardFile 选择其中一个进行设置，不过建议还是使用
proguard-android-optimize.txt这个文件(多了些优化配置)。以gradle版本7.0为例，在app模块的 "build -> intermediates-> default_proguard_files -> global"
这个路径下就能找到这三份文件，不同gradle版本的最后两层路径可能不同，但只要在intermediates搜索proguard就能找到相关文件夹。

> gradle配置
https://github.com/zincPower/GradleStudy

> flavorDimensions前提下，buildTypes的debug模式设置的签名无效的解决方案
https://blog.csdn.net/liuyu0915/article/details/90485863

> 配置splits的abi，生成不同名字的apk（或者不自定义outputFileName使用默认，否则可能会因为名字重复造成打包失败）
https://www.jianshu.com/p/3a31065478bb

> Gradle从入门到实战 - Groovy基础
https://juejin.cn/post/6844903488686817293

> compileSdkVersion,minSdkVersion,targetSdkVersion的区别:（一般配置都是minSdkVersion <= targetSdkVersion == compileSdkVersion ）
1. compileSdkVersion ： 不会被包含到 APK 中，它纯粹只是在编译的时候使用。谷歌强烈推荐你总是使用最新的 SDK 进行编译，
    ，避免新弃用的 API ，并且为使用新的 API 做好准备。
2. minSdkVersion ：判断用户设备是否可以安装某个应用的标志之一。
3. targetSdkVersion：Android 系统提供前向兼容的主要手段，只要 APK 的 targetSdkVersion 不变，即使这个 APK 安装在
    新 Android 系统上，其行为还是保持老的系统上的行为，这样就保证了系统对老应用的前向兼容性。比如android11版本上某个api
    的参数发生了改变，而我们指定的targetSdkVersion是android10，如果这时候指向的是android11的新api，那么一定会发生错误，
    这时候就理解为即便在新的安卓系统上，我们运行的rom环境依旧是targetSdkVersion指定的环境。
